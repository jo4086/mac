  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(out)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:34
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(outp)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:35
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:37
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:37
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our[48;30;120;1080;1920t process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:37
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:41
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:41
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:41
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:41
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf,)
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:42
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, )
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:43
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, )
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:43
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '')
  439 | Â· end                      â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                          â”‚ output_buf Variable â”‚â”‚local output_buf: string = ''â”‚
  441 | end                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:44
  414 | Â· cwd = cwd;                            â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  415 | }, function ()                          â”‚ bufnr                  Text
  416 | Â· stdin:close()                         â”‚ nvim_command           Text
  417 | Â· stdout:close()                        â”‚ exists                 Text
  418 | Â· stderr:close()                        â”‚ nvim_get_current_buf   Text
  419 | Â· handle:close()                        â”‚ path                   Text â”‚
  420 | Â· vim.schedule(function ()              â”‚ validate               Text â”‚
  421 | Â· | api.nvim_command("silent bwipeout!" â”‚ result                 Text â”‚
  422 | Â· end)                                  â”‚ is_windows             Text â”‚
  423 | end)                                    â”‚ module_name            Text â”‚
  424 |                                         â”‚ command_name           Text â”‚
  425 | -- If the buffer closes, then kill our pâ”‚ behavior               Text â”‚
  426 | api.nvim_buf_attach(bufnr, false, {     â”‚ empty_dict             Text â”‚
  427 | Â· on_detach = function ()               â”‚ arguments              Text â”‚
  428 | Â· | if not handle:is_closing() then     â”‚ lsp                    Text â”‚
  429 | Â· | Â· handle:kill(15)                   â”‚ api                    Text â”‚
  430 | Â· | end                                 â”‚ vim                    Text â”‚
  431 | Â· end                                   â”‚ loop                   Text â”‚
  432 | })                                      â”‚ default_config         Text â”‚
  433 |                                         â”‚ log_level              Text â”‚
  434 | local output_buf = ''                   â”‚ protocol               Text â”‚
  435 | local function update_chunk(err, chunk) â”‚ MessageType            Text â”‚
  436 | Â· if chunk then                         â”‚ Warning                Text â”‚
  437 | Â· â–’ output_buf = output_buf .. chunk    â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  438 | Â· â–’ local lines = vim.split(output_buf, '')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:44
  414 | Â· cwd = cwd;                            â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  415 | }, function ()                          â”‚ bufnr                  Text
  416 | Â· stdin:close()                         â”‚ nvim_command           Text
  417 | Â· stdout:close()                        â”‚ exists                 Text
  418 | Â· stderr:close()                        â”‚ nvim_get_current_buf   Text
  419 | Â· handle:close()                        â”‚ path                   Text â”‚
  420 | Â· vim.schedule(function ()              â”‚ validate               Text â”‚
  421 | Â· | api.nvim_command("silent bwipeout!" â”‚ result                 Text â”‚
  422 | Â· end)                                  â”‚ is_windows             Text â”‚
  423 | end)                                    â”‚ module_name            Text â”‚
  424 |                                         â”‚ command_name           Text â”‚
  425 | -- If the buffer closes, then kill our pâ”‚ behavior               Text â”‚
  426 | api.nvim_buf_attach(bufnr, false, {     â”‚ empty_dict             Text â”‚
  427 | Â· on_detach = function ()               â”‚ arguments              Text â”‚
  428 | Â· | if not handle:is_closing() then     â”‚ lsp                    Text â”‚
  429 | Â· | Â· handle:kill(15)                   â”‚ api                    Text â”‚
  430 | Â· | end                                 â”‚ vim                    Text â”‚
  431 | Â· end                                   â”‚ loop                   Text â”‚
  432 | })                                      â”‚ default_config         Text â”‚
  433 |                                         â”‚ log_level              Text â”‚
  434 | local output_buf = ''                   â”‚ protocol               Text â”‚
  435 | local function update_chunk(err, chunk) â”‚ MessageType            Text â”‚
  436 | Â· if chunk then                         â”‚ Warning                Text â”‚
  437 | Â· â–’ output_buf = output_buf .. chunk    â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  438 | Â· â–’ local lines = vim.split(output_buf, '')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:44
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:46
  414 | Â· cwd = cwd;                             â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  415 | }, function ()                           â”‚ nvim_command               Text
  416 | Â· stdin:close()                          â”‚ nvim_get_current_buf       Text
  417 | Â· stdout:close()                         â”‚ nvim_err_writeln           Text
  418 | Â· stderr:close()                         â”‚ node_modules               Text
  419 | Â· handle:close()                         â”‚ new_fn                     Text
  420 | Â· vim.schedule(function ()               â”‚ number                     Text
  421 | Â· | api.nvim_command("silent bwipeout!" .â”‚ nvim_multiline_command     Text
  422 | Â· end)                                   â”‚ nvim_lsp                   Text
  423 | end)                                     â”‚ new                        Text
  424 |                                          â”‚ new_config                 Text
  425 | -- If the buffer closes, then kill our prâ”‚ npm_installer              Text
  426 | api.nvim_buf_attach(bufnr, false, {      â”‚ npm                        Text
  427 | Â· on_detach = function ()                â”‚ names                      Text
  428 | Â· | if not handle:is_closing() then      â”‚ name                       Text
  429 | Â· | Â· handle:kill(15)                    â”‚ need                       Text
  430 | Â· | end                                  â”‚ nvim_get_current_win       Text
  431 | Â· end                                    â”‚ new_pipe                   Text
  432 | })                                       â”‚ nvim_buf_attach            Text
  433 |                                          â”‚ Nvim                       Text
  434 | local output_buf = ''                    â”‚ not                        Text
  435 | local function update_chunk(err, chunk)  â”‚ server_name                Text â”‚
  436 | Â· if chunk then                          â”‚ module_name                Text â”‚
  437 | Â· â–’ output_buf = output_buf .. chunk     â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  438 | Â· â–’ local lines = vim.split(output_buf, '\n')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:46
  414 | Â· cwd = cwd;                             â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  415 | }, function ()                           â”‚ nvim_command               Text
  416 | Â· stdin:close()                          â”‚ nvim_get_current_buf       Text
  417 | Â· stdout:close()                         â”‚ nvim_err_writeln           Text
  418 | Â· stderr:close()                         â”‚ node_modules               Text
  419 | Â· handle:close()                         â”‚ new_fn                     Text
  420 | Â· vim.schedule(function ()               â”‚ number                     Text
  421 | Â· | api.nvim_command("silent bwipeout!" .â”‚ nvim_multiline_command     Text
  422 | Â· end)                                   â”‚ nvim_lsp                   Text
  423 | end)                                     â”‚ new                        Text
  424 |                                          â”‚ new_config                 Text
  425 | -- If the buffer closes, then kill our prâ”‚ npm_installer              Text
  426 | api.nvim_buf_attach(bufnr, false, {      â”‚ npm                        Text
  427 | Â· on_detach = function ()                â”‚ names                      Text
  428 | Â· | if not handle:is_closing() then      â”‚ name                       Text
  429 | Â· | Â· handle:kill(15)                    â”‚ need                       Text
  430 | Â· | end                                  â”‚ nvim_get_current_win       Text
  431 | Â· end                                    â”‚ new_pipe                   Text
  432 | })                                       â”‚ nvim_buf_attach            Text
  433 |                                          â”‚ Nvim                       Text
  434 | local output_buf = ''                    â”‚ not                        Text
  435 | local function update_chunk(err, chunk)  â”‚ server_name                Text â”‚
  436 | Â· if chunk then                          â”‚ module_name                Text â”‚
  437 | Â· â–’ output_buf = output_buf .. chunk     â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  438 | Â· â–’ local lines = vim.split(output_buf, '\n')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:46
  414 | Â· cwd = cwd;                             â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  415 | }, function ()                           â”‚ nvim_command               Text
  416 | Â· stdin:close()                          â”‚ nvim_get_current_buf       Text
  417 | Â· stdout:close()                         â”‚ nvim_err_writeln           Text
  418 | Â· stderr:close()                         â”‚ node_modules               Text
  419 | Â· handle:close()                         â”‚ new_fn                     Text
  420 | Â· vim.schedule(function ()               â”‚ number                     Text
  421 | Â· | api.nvim_command("silent bwipeout!" .â”‚ nvim_multiline_command     Text
  422 | Â· end)                                   â”‚ nvim_lsp                   Text
  423 | end)                                     â”‚ new                        Text
  424 |                                          â”‚ new_config                 Text
  425 | -- If the buffer closes, then kill our prâ”‚ npm_installer              Text
  426 | api.nvim_buf_attach(bufnr, false, {      â”‚ npm                        Text
  427 | Â· on_detach = function ()                â”‚ names                      Text
  428 | Â· | if not handle:is_closing() then      â”‚ name                       Text
  429 | Â· | Â· handle:kill(15)                    â”‚ need                       Text
  430 | Â· | end                                  â”‚ nvim_get_current_win       Text
  431 | Â· end                                    â”‚ new_pipe                   Text
  432 | })                                       â”‚ nvim_buf_attach            Text
  433 |                                          â”‚ Nvim                       Text
  434 | local output_buf = ''                    â”‚ not                        Text
  435 | local function update_chunk(err, chunk)  â”‚ server_name                Text â”‚
  436 | Â· if chunk then                          â”‚ module_name                Text â”‚
  437 | Â· â–’ output_buf = output_buf .. chunk     â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  438 | Â· â–’ local lines = vim.split(output_buf, '\n')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:46
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:47
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n')
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:47
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n',)
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:48
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', )
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:49
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)                                         â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  424 |                                              â”‚ tostring(v)            Function â”‚
  425 | -- If the buffer closes, then kill our procesâ”‚ tonumber(e)            Function â”‚
  426 | api.nvim_buf_attach(bufnr, false, {          â”‚ tonumber(e, base)      Function â”‚
  427 | Â· on_detach = function ()                    â”‚ type(v)                Function â”‚
  428 | Â· | if not handle:is_closing() then          â”‚ table                  Field    â”‚
  429 | Â· | Â· handle:kill(15)                        â”‚ true                   Keyword  â”‚
  430 | Â· | end                                      â”‚ then                   Text     â”‚
  431 | Â· end                                        â”‚ traverse_parents       Text     â”‚
  432 | })                                           â”‚ tbl                    Text     â”‚
  433 |                                              â”‚ the                    Text     â”‚
  434 | local output_buf = ''                        â”‚ time~                  Snippet  â”‚
  435 | local function update_chunk(err, chunk)      â”‚ timeHMS~               Snippet  â”‚
  436 | Â· if chunk then                              â”‚ zip_lists_to_map(a, b) Function â”‚
  437 | Â· â–’ output_buf = output_buf .. chunk         â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', t)
  439 | Â· end
  440 | Â·
  441 | end
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:50
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', tru)
  439 | Â· end                                        â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                                            â”‚ true Keyword â”‚
  441 | end                                          â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:52
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439 | Â· end                                        â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                                            â”‚ true Keyword â”‚
  441 | end                                          â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:53
  414 | Â· cwd = cwd;
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439 | Â· end                                        â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
  440 | Â·                                            â”‚ true Keyword â”‚
  441 | end                                          â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
  442 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 11 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 438:53
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
H 435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
H 438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439
  440 | Â· end
H 441 | Â·
  442 | end
  443 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 12 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 439:7
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
H 435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
H 438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439 | Â· â–’
  440 | Â· end
H 441 | Â·
  442 | end
  443 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 12 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 439:7
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439 | Â· â–’
  440 | Â· end
  441 | Â·
  442 | end
  443 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 12 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 439:7
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439 | Â· â–’
  440 | Â· end
  441 | Â·
  442 | end
  443 end
 INSERT î‚° ó°…š 1 ó°€ª 11 ó°Œ¶ 12 î‚° util.lua [+]                                                   utf-8 î‚³ îœ’ î‚³ î˜  lua î‚² 99% î‚² 439:7
  415 | }, function ()
  416 | Â· stdin:close()
  417 | Â· stdout:close()
  418 | Â· stderr:close()
  419 | Â· handle:close()
  420 | Â· vim.schedule(function ()
  421 | Â· | api.nvim_command("silent bwipeout!" .. bufnr)
  422 | Â· end)
  423 | end)
  424 |
  425 | -- If the buffer closes, then kill our process.
  426 | api.nvim_buf_attach(bufnr, false, {
  427 | Â· on_detach = function ()
  428 | Â· | if not handle:is_closing() then
  429 | Â· | Â· handle:kill(15)
  430 | Â· | end
  431 | Â· end
  432 | })
  433 |
  434 | local output_buf = ''
  435 | local function update_chunk(err, chunk)
  436 | Â· if chunk then
  437 | Â· â–’ output_buf = output_buf .. chunk
  438 | Â· â–’ local lines = vim.split(output_buf, '\n', true)
  439 | Â· â–’
  440 | Â· end
  441 | Â·
  442 | end
  443 end
}, function ()
stdin:close()
stdout:close()
stderr:close()
handle:close()
vim.schedule(function ()
api.nvim_command("silent bwipeout!" .. bufnr)
end)
end)
-- If the buffer closes, then kill our process.
api.nvim_buf_attach(bufnr, false, {
on_detach = function ()
if not handle:is_closing() then
handle:kill(15)
end
end
})
local output_buf = ''
local function update_chunk(err, chunk)
if chunk then
output_buf = output_buf .. chunk
local lines = vim.split(output_buf, '\n', true)
end
end
end
}, function ()
stdin:close()
stdout:close()
stderr:close()
handle:close()
vim.schedule(function ()
api.nvim_command("silent bwipeout!" .. bufnr)
end)
end)

-- If the buffer closes, then kill our process.
api.nvim_buf_attach(bufnr, false, {
on_detach = function ()
if not handle:is_closing() then
handle:kill(15)
end
end
})

local output_buf = ''
local function update_chunk(err, chunk)
if chunk then
output_buf = output_buf .. chunk
local lines = vim.split(output_buf, '\n', true)
end

end
end
stdout:close()
stderr:close()
handle:close()
vim.schedule(function ()
api.nvim_command("silent bwipeout!" .. bufnr)
end)
end)

-- If the buffer closes, then kill our process.
api.nvim_buf_attach(bufnr, false, {
on_detach = function ()
if not handle:is_closing() then
handle:kill(15)
end
end
})

 local output_buf = ''
 local function update_chunk(err, chunk)
 if chunk then
 output_buf = output_buf .. chunk
local lines = vim.split(output_buf, '\n', true)
 a
 end

end
end


